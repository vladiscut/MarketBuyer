import json
from aiogram.types import CallbackQuery,FSInputFile, ReplyKeyboardRemove, Message
from aiogram import Bot
from keyboards.reply.reply_keyboards import get_reply_keyboard
from states.states import orderStates
from keyboards.reply.reply_keyboards import get_location_keyboard, get_number_keyboard
from loader import bot, goods, tech_chat
from utils.callbackdata import *
from aiogram.fsm.context import FSMContext
from keyboards.inline.inline_keyboards import *
from .message import check_favs
from connectors.db_funct import create_order,del_from_fav,create_user,add_to_cart,check_cartTable, clean_cart_db,clean_cart_product,add_to_fav,check_favTable
import pandas as pd
from geopy.geocoders import Nominatim
geolocator = Nominatim(user_agent="geoapiExercises")
import datetime
import ast
from pytz import timezone



#–í–´–ó–û–í –ü–û–î–ö–ê–¢–ï–ì–û–†–ò–ô
async def category_call(call: CallbackQuery, bot: Bot,callback_data: Category):
    photo = FSInputFile('photos/NataliyaPhoto.jpg')
    create_user(call.message.chat.id, call.message.chat.first_name)
    df_goods = goods.loc[goods['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']==callback_data.name].reset_index(drop=True)
    if (str(goods.loc[goods['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']==callback_data.name]['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è'].unique()[0]))!='nan':
        list_but = goods.loc[goods['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']==callback_data.name]['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è'].unique().tolist()
        ikb_catalogue = subcategory_buttons(list_but,(1,))
    elif (str(goods.loc[goods['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']==callback_data.name]['–ù–∞–∏–º–µ–Ω–æ–≤–Ω–∏–µ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É'].unique()[0]))!='nan':
        ikb_catalogue = product_buttons(df_goods,(1,))
    else:
        await call.answer('–ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        ikb_catalogue = subcategory_buttons(['–ø—É—Å—Ç–æ'],(1,))
        return
    await bot.send_photo(chat_id= call.message.chat.id,
                        photo=photo,
                        caption=callback_data.name,
                        reply_markup=ikb_catalogue)
    text = callback_data.name
    await call.answer(text)

#–í–´–ó–û–í –¢–û–í–ê–†–û–í
async def subcategory_call(call: CallbackQuery, bot: Bot,callback_data: Subcat):
    photo = FSInputFile('photos/NataliyaPhoto.jpg')
    df_goods = goods.loc[goods['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è']==callback_data.name].reset_index(drop=True)
    ikb_catalogue = product_buttons(df_goods,(1,))
    await bot.send_photo(chat_id= call.message.chat.id,
                        photo=photo,
                        caption=str(call.message.caption) + '\\'+ str(callback_data.name),
                        reply_markup=ikb_catalogue)
    text = callback_data.name
    await call.answer(text)

#–ü–†–û–°–ú–û–¢–† –¢–û–í–ê–†–ê
async def product_call(call: CallbackQuery, bot: Bot,callback_data: Product):
    cat_cap = call.message.caption
    if not cat_cap:
        cat_cap=''
    good = goods.loc[goods['–ê—Ä—Ç–∏–∫—É–ª']==callback_data.id]
    cart_data = pd.DataFrame(check_cartTable(call.message.chat.id), columns=['userid', 'itemid', 'weight','itemsum'])
    if not cart_data.empty:
        cart_exist = True
    else: 
        cart_exist = False
    print(good.reset_index(drop=True)['–ê—Ä—Ç–∏–∫—É–ª'][0])
    photo = good.reset_index(drop=True)['–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞'][0]
    price = good.reset_index(drop=True)['–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥.'][0]
    title = good.reset_index(drop=True)['–ù–∞–∏–º–µ–Ω–æ–≤–Ω–∏–µ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É'][0]
    volume = good.reset_index(drop=True)['–û–±—ä–µ–º'][0]
    weight = float(str(good.reset_index(drop=True)['–ó–∞–∫–∞–∑ –æ—Ç'][0]).replace(',','.'))
    sumprice = float(str(weight).replace(',','.')) * float(price)
    ikb_catalogue = product_detail_buttons(good, weight,sumprice,cart_exist)
    await bot.send_photo(chat_id= call.message.chat.id,
                        photo=photo,
                        caption=cat_cap + '\n\n' +title + ' '+ str(price)+ '‚ÇΩ –∑–∞ '+str(volume),
                        reply_markup=ikb_catalogue)
    await call.answer(title)

#–î–û–ë–ê–í–ò–¢–¨ –í–ï–°\–®–¢
async def add_button(call: CallbackQuery, callback_data: AddProduct):
    good = goods.loc[goods['–ê—Ä—Ç–∏–∫—É–ª']==callback_data.id]
    cart_data = pd.DataFrame(check_cartTable(call.message.chat.id), columns=['userid', 'itemid', 'weight','itemsum'])
    if not cart_data.empty:
        cart_exist = True
    else: 
        cart_exist = False
    step = good.reset_index(drop=True)['–®–∞–≥ –∑–∞–∫–∞–∑–∞'][0]
    price = good.reset_index(drop=True)['–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥.'][0]
    weight = callback_data.weight + float(step)
    sumprice = callback_data.sumprice + (price*step)
    await call.message.edit_reply_markup(reply_markup=product_detail_buttons(good=good, weight=weight, sumprice=sumprice,cart_exist=cart_exist))

#–£–ë–ê–í–ò–¢–¨ –í–ï–°\–®–¢
async def delete_button(call: CallbackQuery, callback_data: DelProduct):
    good = goods.loc[goods['–ê—Ä—Ç–∏–∫—É–ª']==callback_data.id]
    cart_data = pd.DataFrame(check_cartTable(call.message.chat.id), columns=['userid', 'itemid', 'weight','itemsum'])
    if not cart_data.empty:
        cart_exist = True
    else: 
        cart_exist = False
    step = good.reset_index(drop=True)['–®–∞–≥ –∑–∞–∫–∞–∑–∞'][0]
    price = good.reset_index(drop=True)['–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥.'][0]
    if callback_data.weight > float(str(good.reset_index(drop=True)['–ó–∞–∫–∞–∑ –æ—Ç'][0]).replace(',','.')):
        weight = callback_data.weight - float(step)
        sumprice = callback_data.sumprice - (price*step)
        await call.message.edit_reply_markup(reply_markup=product_detail_buttons(good=good, weight=weight, sumprice=sumprice, cart_exist=cart_exist))
    else:
        await call.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –æ—Ç '+ str(good.reset_index(drop=True)['–ó–∞–∫–∞–∑ –æ—Ç'][0])+' ' +good.reset_index(drop=True)['–û–±—ä–µ–º'][0])


###################################
#–î–û–ë–ê–í–ò–¢–¨ –í –ö–û–†–ó–ò–ù–£
async def addcart_button(call: CallbackQuery, callback_data: AddCart):
    create_user(call.message.chat.id, call.message.chat.first_name)
    add_to_cart(call.message.chat.id, callback_data.id, callback_data.weight, callback_data.sumprice)
    cart_exist = True
    good = goods.loc[goods['–ê—Ä—Ç–∏–∫—É–ª']==callback_data.id]
    price = good.reset_index(drop=True)['–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥.'][0]
    weight = float(str(good.reset_index(drop=True)['–ó–∞–∫–∞–∑ –æ—Ç'][0]).replace(',','.'))
    sumprice = float(str(weight).replace(',','.')) * float(price)
    ikb_catalogue = product_detail_buttons(good, weight,sumprice,cart_exist)
    try:
        await call.message.edit_reply_markup(reply_markup=ikb_catalogue)
    except:
        pass
    await call.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∏–∑–Ω—É')

#–û–ß–ò–°–¢–ö–ê –ö–û–†–ò–ó–ò–ù–´
async def clean_cart(call: CallbackQuery):
    cart_data = pd.DataFrame(check_cartTable(call.message.chat.id), columns=['userid', 'itemid', 'weight','itemsum'])
    if not cart_data.empty:
        cart_exist = True
        await bot.send_message(chat_id= call.message.chat.id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µüëá',
            reply_markup=three_inline_buttons(['–£–¥–∞–ª–∏—Ç—å –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é','–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë','–ö –∫–æ—Ä–∑–∏–Ω–µ'],(1,2,)))
        await call.answer('–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã')
    else: 
        await call.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')

#–û–ß–ò–°–¢–ö–ê –ö–û–†–ò–ó–ò–ù–´ –£–î–ê–õ–ï–ù–ò–ï –û–î–ù–û–ô –ü–û–ó–ò–¶–ò–ò ‚Ññ1
async def clean_one(call: CallbackQuery):
    cart_data = pd.DataFrame(check_cartTable(call.message.chat.id), columns=['userid', 'itemid', 'weight','itemsum'])
    if not cart_data.empty:
        df2 = cart_data[['itemid','weight','itemsum']].groupby('itemid').sum().reset_index()
        goods_df = goods.loc[goods['–ê—Ä—Ç–∏–∫—É–ª'].isin(df2['itemid'].tolist())].reset_index(drop=True)
        await bot.send_message(chat_id= call.message.chat.id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –Ω–∏–∂–µ',
        reply_markup=del_cart_product(goods_df,(1,)))
        await call.answer('–£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏')
    else: 
        await call.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')

#–û–ß–ò–°–¢–ö–ê –ö–û–†–ò–ó–ò–ù–´ –£–î–ê–õ–ï–ù–ò–ï –û–î–ù–û–ô –ü–û–ó–ò–¶–ò–ò ‚Ññ2
async def clean_two(call: CallbackQuery, callback_data: DelCartProduct):
    clean_cart_product(call.message.chat.id, callback_data.id)
    good = goods.loc[goods['–ê—Ä—Ç–∏–∫—É–ª']==callback_data.id]
    title = good.reset_index(drop=True)['–ù–∞–∏–º–µ–Ω–æ–≤–Ω–∏–µ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É'][0]
    await bot.send_message(chat_id= call.message.chat.id,
            text='–ü—Ä–æ–¥—É–∫—Ç  "'+ str(title) + '"  —É–¥–∞–ª–µ–Ω',
            reply_markup=three_inline_buttons(['–£–¥–∞–ª–∏—Ç—å –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é','–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë','–ö –∫–æ—Ä–∑–∏–Ω–µ', '–û—Ñ–æ—Ä–º–∏—Ç—å'],(1,2,)))
    await call.answer()
    
#–û–ß–ò–°–¢–ö–ê –ö–û–†–ò–ó–ò–ù–´ –ü–û–õ–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï
async def clean_cart_full(call: CallbackQuery):
    clean_cart_db(call.message.chat.id)
    await bot.send_message(chat_id= call.message.chat.id,
            text='–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞',
            reply_markup=three_inline_buttons(['–ö –∫–∞—Ç–∞–ª–æ–≥—É','–ö –∫–æ—Ä–∑–∏–Ω–µ'],(1,)))
    await call.answer('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞')


################################
#–î–û–ë–ê–í–ò–¢–¨ –í –ò–ó–ë–†–ê–ù–ù–û–ï
async def addfav_button(call: CallbackQuery, callback_data: AddFav):
    create_user(call.message.chat.id, call.message.chat.first_name)
    fav_data = pd.DataFrame(check_favTable(call.message.chat.id), columns=['userid', 'itemid'])
    if not fav_data.empty:
        favs = fav_data.loc[fav_data['itemid']==callback_data.id]
        if not favs.empty:
            await call.answer('–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ')
        else:
            add_to_fav(call.message.chat.id, callback_data.id) 
            await call.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ')
    else:
        add_to_fav(call.message.chat.id, callback_data.id) 
        await call.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ')

#–û–ß–ò–°–¢–ö–ê –ò–ó–ë–†–ê–ù–ù–û–ì–û –£–î–ê–õ–ï–ù–ò–ï –û–î–ù–û–ô –ü–û–ó–ò–¶–ò–ò ‚Ññ1
async def clean_favs(call: CallbackQuery):
    favs_data = pd.DataFrame(check_favTable(call.message.chat.id), columns=['userid', 'itemid'])
    if not favs_data.empty:
        df_goods =goods.loc[goods['–ê—Ä—Ç–∏–∫—É–ª'].isin(favs_data['itemid'].tolist())].reset_index(drop=True)
        ikb_favs = del_favs_product(df_goods,(1,))
        await call.message.answer(text='–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –Ω–∏–∂–µüëá',
                            reply_markup=ikb_favs)
    else:
        ikb_cart = three_inline_buttons(['–ö –∫–∞—Ç–∞–ª–æ–≥—É',],(1,))
        await call.message.answer(text='–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø—É—Å—Ç–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"',
                            reply_markup=ikb_cart)
        
#–û–ß–ò–°–¢–ö–ê –ò–ó–ë–†–ê–ù–ù–û–ì–û –£–î–ê–õ–ï–ù–ò–ï –û–î–ù–û–ô –ü–û–ó–ò–¶–ò–ò ‚Ññ2
async def clean_favs_two(call: CallbackQuery, callback_data: DelFavsProduct):
    del_from_fav(call.message.chat.id, callback_data.id)
    good = goods.loc[goods['–ê—Ä—Ç–∏–∫—É–ª']==callback_data.id]
    title = good.reset_index(drop=True)['–ù–∞–∏–º–µ–Ω–æ–≤–Ω–∏–µ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É'][0]
    await bot.send_message(chat_id= call.message.chat.id,
            text='–ü—Ä–æ–¥—É–∫—Ç  "'+ str(title) + '" —É–¥–∞–ª–µ–Ω',
            reply_markup=three_inline_buttons(['–ò–∑–±—Ä–∞–Ω–Ω—ã–µ','–ö –∫–∞—Ç–∞–ª–æ–≥—É','–ö–æ—Ä–∑–∏–Ω–∞'],(1,2,)))
    await call.answer()

############################
#–û–§–û–†–ú–õ–ï–ù–ò–ï

async def neworder_canlcel(call, state: FSMContext):
    if type(call) == CallbackQuery:
        await call.answer()
        call=call.message
    await bot.send_message(chat_id= call.chat.id,
            text='–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
            reply_markup=three_inline_buttons(['–ò–∑–±—Ä–∞–Ω–Ω—ã–µ','–ö –∫–∞—Ç–∞–ª–æ–≥—É','–ö–æ—Ä–∑–∏–Ω–∞'],(1,2,)))
    await state.clear()


async def neworder_shipments(call: CallbackQuery , state: FSMContext):
    shipments_list = goods.loc[( goods['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']=='–î–æ—Å—Ç–∞–≤–∫–∞')].reset_index(drop=True)
    text_msg=''
    for i in range(len(shipments_list)):
        title = shipments_list['–ù–∞–∏–º–µ–Ω–æ–≤–Ω–∏–µ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É'][i]
        price = shipments_list['–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥.'][i]
        text_msg +='üîπ' + title + str('  ü´∞–¶–µ–Ω–∞: ') + str(price) + ';\n'
    await bot.send_message(chat_id= call.message.chat.id,
                  text=f'–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏:\n{text_msg}–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –Ω–∏–∂–µ',
                  reply_markup=shipments_buttons(shipments_list))
    await state.set_state(orderStates.shipment)
    await call.answer()

async def neworder_adress(call: CallbackQuery , state: FSMContext):
    # print(call.data)
    await call.answer()
    ship_product = goods.loc[goods['–ê—Ä—Ç–∏–∫—É–ª']==int(call.data)].reset_index(drop=True)[['–ù–∞–∏–º–µ–Ω–æ–≤–Ω–∏–µ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É', '–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥.']]
    cart_data = pd.DataFrame(check_cartTable(call.message.chat.id), columns=['userid', 'itemid', 'weight','itemsum'])
    if not cart_data.empty:
        df2 = cart_data[['itemid','weight','itemsum']].groupby('itemid').sum().reset_index()
        await state.update_data(products = str(df2.to_dict(orient='list')))
        await state.update_data(shipment = str(ship_product['–ù–∞–∏–º–µ–Ω–æ–≤–Ω–∏–µ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É'][0]) + str(' –ó–∞ ') +str(ship_product['–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥.'][0]))
        text_msg='–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã: \n'
        res_sum = float(ship_product['–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥.'][0])
        for i in range(len(df2)):
            good = goods.loc[goods['–ê—Ä—Ç–∏–∫—É–ª']==df2['itemid'][i]]
            title = good.reset_index(drop=True)['–ù–∞–∏–º–µ–Ω–æ–≤–Ω–∏–µ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É'][0]
            volume = good.reset_index(drop=True)['–û–±—ä–µ–º'][0]
            text_msg +='üîπ' + title + str('  ‚öñÔ∏è–í–µ—Å: ') + str(df2['weight'][i]) +' '+str(volume) + str('  ü´∞–°—É–º–º–∞: ') + str(df2['itemsum'][i]) + ';\n'
            res_sum += df2['itemsum'][i]
        text_msg += '____________________________________\n\n –í—ã–±—Ä–∞–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ {} –∑–∞ {} \n\n–°—É–º–º–∞ —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏: {}'.format(ship_product['–ù–∞–∏–º–µ–Ω–æ–≤–Ω–∏–µ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É'][0], ship_product['–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥.'][0], str(res_sum)+' ‚ÇΩ')
        await call.message.answer(text=text_msg)
        if int(call.data) == 520:
            await call.message.answer(text='–°—É–ø–µ—Ä, –Ω–∞—à –∞–¥—Ä–µ—Å –¢–∞–∫–∞—è-—Ç–æ —É–ª–∏—Ü–∞ –¥–æ–º 4, –∑–∞–ø–∏—à–∏, —á—Ç–æ–± –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å', reply_markup=get_reply_keyboard(['–ó–∞–ø–∏—Å–∞–ª!']))
            await state.set_state(orderStates.number)
        else:
            kb = get_location_keyboard()
            await bot.send_message(chat_id= call.message.chat.id,
                        text='–û—Ç–ª–∏—á–Ω–æ!‚≠êÔ∏è\n–ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏–º?üìç\n–ú–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è" —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∞–¥—Ä–µ—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏üôÉ\n–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä: `–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ß–∏—Å—Ç–æ–ø—Ä—É–¥–Ω—ã–π –±—É–ª—å–≤–∞—Ä, –¥–æ–º 6, –∫–≤–∞—Ä—Ç–∏—Ä–∞ 20`',
                        reply_markup=kb, parse_mode='Markdown')
            await state.set_state(orderStates.number)
    else:
        ikb_cart = three_inline_buttons(['–ö –∫–∞—Ç–∞–ª–æ–≥—É',],(1,))
        await call.message.answer(text='–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', reply_markup=ikb_cart)


async def neworder_number(msg: Message, state: FSMContext):
    if msg.location:
        location = geolocator.reverse(str(msg.location.latitude)+","+str(msg.location.longitude))
    else:
        location = msg.text
    await state.update_data(adress = location)
    kb = get_number_keyboard()
    await bot.send_message(chat_id= msg.chat.id,
                text='–ü–æ—á—Ç–∏ –≤—Å—ë!üòá\n–û—Å—Ç–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üì±\n–ú–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö–æ–Ω—Ç–∞–∫—Ç" —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–∫—É—â–∏–º –Ω–æ–º–µ—Ä–æ–º, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏',
                reply_markup=kb)
      
    await state.set_state(orderStates.send_order)

async def neworder_send(msg: Message, state: FSMContext):
    if msg.contact:
        phone = msg.contact.phone_number
    else:
        phone = msg.text
    await state.update_data(phone = phone)
    data = await state.get_data()
    today = datetime.datetime.now(timezone('Europe/Moscow')).strftime('%Y-%m-%d %H:%M:%S')
    df_ord_goods = pd.DataFrame(eval(data['products']))
    create_order(msg.chat.username, msg.chat.id, str(data['products']), str(today), str(data['adress']), str(data['phone']), str(data['shipment']))
    order_goods = goods.loc[goods['–ê—Ä—Ç–∏–∫—É–ª'].isin(df_ord_goods['itemid'].tolist())].reset_index(drop=True)[['–ù–∞–∏–º–µ–Ω–æ–≤–Ω–∏–µ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É', '–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥.']]
    text_goods = ''
    res_sum=float(data['shipment'].split(' –ó–∞ ')[1])
    for i in range(len(order_goods)):
        text_goods+=str('--') + order_goods['–ù–∞–∏–º–µ–Ω–æ–≤–Ω–∏–µ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É'][i] + str(' –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ')+ str(df_ord_goods['weight'][i]) + str(' –°—É–º–º–∞: ') + str(df_ord_goods['itemsum'][i]) + str('\n')
        res_sum+=float(df_ord_goods['itemsum'][i])
    try:
        await bot.send_message(tech_chat, f"‚úâ | –ù–æ–≤—ã–π –∑–∞–∫–∞–∑\n–û—Ç: {msg.chat.username}\n–¢–æ–≤–∞—Ä—ã:\n`{text_goods}`\n–î–æ—Å—Ç–∞–≤–∫–∞: `{data['shipment']}`\n–ê–¥—Ä–µ—Å: `{data['adress']}`\n–¢–µ–ª–µ—Ñ–æ–Ω: `{data['phone']}`\n–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: `{res_sum}`\n\nüìù –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–≤–µ–¥–∏—Ç–µ `/–æ—Ç–≤–µ—Ç {msg.chat.id} –í–∞—à –æ—Ç–≤–µ—Ç`", parse_mode='Markdown')
    except:
        await bot.send_message(tech_chat, f"‚úâ | –ù–æ–≤—ã–π –∑–∞–∫–∞–∑\n–û—Ç: {msg.chat.username}\n–¢–æ–≤–∞—Ä—ã:\n`{text_goods}`\n–î–æ—Å—Ç–∞–≤–∫–∞: `{data['shipment']}`\n–ê–¥—Ä–µ—Å: `{data['adress']}`\n–¢–µ–ª–µ—Ñ–æ–Ω: `{data['phone']}`\n–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: `{res_sum}`\n\nüìù –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–≤–µ–¥–∏—Ç–µ `/–æ—Ç–≤–µ—Ç {msg.chat.id} –í–∞—à –æ—Ç–≤–µ—Ç`")
    await msg.answer(f"–í–∞—à –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã\n–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É 89991112233 –°–±–µ—Ä–±–∞–Ω–∫ –ü—Ä–æ–≤–µ—Ä–∫–∏–Ω –ü.–ê, —Å—É–º–º–∞ {res_sum}\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏‚úÖ", reply_markup=ReplyKeyboardRemove())
    await state.clear()
### –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ô –ó–ê–ö–ê–ó–ê ###
    





#–û–ë–†–ê–¢–ù–û
async def back(call: CallbackQuery, bot: Bot):
    photo = FSInputFile('photos/NataliyaPhoto.jpg')
    if str(call.message.reply_markup.inline_keyboard[0][0]).startswith("text='-'"):
        g_cat = (call.message.caption).split('\n\n')[0].split('\\')
        if len(g_cat)>1:
            df_goods = goods.loc[goods['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è']==g_cat[1]].reset_index(drop=True)
            ikb_catalogue = product_buttons(df_goods,(1,))
            cap = str(call.message.caption).split('\n\n')[0]
        elif '\n' not in str(call.message.caption):
            await check_favs(call)
            await call.answer('–ò–∑–±—Ä–∞–Ω–Ω—ã–µ')
            return
        else:
            df_goods = goods.loc[goods['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']==g_cat[0]].reset_index(drop=True)
            ikb_catalogue = product_buttons(df_goods,(1,))
            cap = str(call.message.caption).split('\n\n')[0].split('\\')[0]
    elif len((call.message.caption).split('\\'))>1:
        g = goods.loc[goods['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']==str(call.message.caption).split('\\')[0]]['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è'].unique()
        list_but =g.tolist()
        ikb_catalogue = subcategory_buttons(list_but,(1,))
        cap = str(call.message.caption).split('\\')[0]
    else:
        list_but = goods['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique().tolist()[:-2]
        ikb_catalogue = category_buttons(list_but,(2,1,1,1,1,1,1,2,1,1,2,1,))
        cap='–ü—Ä–∏–≤–µ—Ç! üôÇ\n–° –í–∞–º–∏ –ù–∞—Ç–∞–ª—å—è –∏ –º–æ–π –Ω–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç - –±–æ—Ç ü§ñ Market Buyer üë©üèº‚Äçüåæ\n–¢–µ–ø–µ—Ä—å —ç—Ç–æ –í–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Å–≤–µ–∂–∏—Ö –∏ –≤–∫—É—Å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ üçí\n\n–°–º–µ–ª–æ –Ω–∞–ø–æ–ª–Ω—è–π—Ç–µ –∫–æ—Ä–∑–∏–Ω—É üß∫ –∏ –æ—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–∫–∞–∑—ã —Å–µ–±–µ –∏ –±–ª–∏–∑–∫–∏–º, –≤–µ–¥—å –¥–æ—Å—Ç–∞–≤–∫–∞ —Å–≤–µ–∂–∏—Ö –∏ –≤–∫—É—Å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –≤—Å–µ–π –ú–æ—Å–∫–≤–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ ))'
    await bot.send_photo(chat_id= call.message.chat.id,
                    photo=photo,
                    caption=cap,
                    reply_markup=ikb_catalogue)
    await call.answer(call.message.text)