from aiogram import types
from loader import dp,bot,ADMIN, HELP_COMMAND, goods, tech_chat
from aiogram.utils.chat_action import ChatActionSender
from connectors.db_funct import create_user,check_cartTable,check_favTable,check_orders
from keyboards.reply.reply_keyboards import get_reply_keyboard
from keyboards.inline.inline_keyboards import category_buttons,three_inline_buttons, favs_buttons
import pandas as pd

# @dp.message_handler(commands=['catalogue'])
# @dp.message_handler(Text(equals='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))

#–∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
async def otvet(msg: types.Message):
    chat_id = str(msg.text).split(' ')[1]
    answer = ''
    answer_raw = str(msg.text).split(' ')[2:]
    photo1 = types.InputMediaPhoto(type='photo', media=types.FSInputFile(r'photos/example1.jpg'), caption='–ü—Ä–∏–º–µ—Ä –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è')
    photo2 = types.InputMediaPhoto(type='photo', media=types.FSInputFile(r'photos/example2.jpg'), caption='–ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏')
    media=[photo2,photo1]
    await bot.send_media_group(chat_id, media)
    for w in answer_raw:
        answer += w + ' '
    try:
        await bot.send_message(chat_id, f"‚úâ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n–û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n`{str(answer)}`\n\nüìù –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ `/–¥–æ–ø–∏–Ω—Ñ–æ –í–∞—à –æ—Ç–≤–µ—Ç`",parse_mode='Markdown')
    except:
        await bot.send_message(chat_id, f"‚úâ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n–û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n`{str(answer)}`\n\nüìù –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ `/–¥–æ–ø–∏–Ω—Ñ–æ –í–∞—à –æ—Ç–≤–µ—Ç`")
    await msg.reply('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!')


#–∫–ª–∏–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ø_–∏–Ω—Ñ—ã
async def dop_data(msg: types.Message):
    answer = ''
    answer_raw = str(msg.text).split(' ')[1:]
    for w in answer_raw:
        answer += w + ' '
    try:
        await bot.send_message(tech_chat, f"‚úâ | –£—Ç–æ—á–Ω–µ–Ω–∏–µ\n–û—Ç: {msg.chat.username}\n\n–¢–µ–∫—Å—Ç:\n\n`{str(answer)}`\n\nüìù –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ `/–æ—Ç–≤–µ—Ç {msg.chat.id} –í–∞—à –æ—Ç–≤–µ—Ç`", parse_mode='Markdown')
    except:
        await bot.send_message(tech_chat, f"‚úâ | –£—Ç–æ—á–Ω–µ–Ω–∏–µ\n–û—Ç: {msg.chat.username}\n\n–¢–µ–∫—Å—Ç:\n\n`{str(answer)}`\n\nüìù –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ `/–æ—Ç–≤–µ—Ç {msg.chat.id} –í–∞—à –æ—Ç–≤–µ—Ç`")
    await msg.answer(f"–£—Ç–æ—á–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Å–ø–∞—Å–∏–±–æ!‚úÖ")


async def process_main_menu_command(msg):
    if type(msg) == types.CallbackQuery:
        await msg.answer()
        msg=msg.message   
    create_user(msg.from_user.id, msg.from_user.first_name)
    photo = types.FSInputFile('photos/NataliyaPhoto.jpg')
    list_but = goods['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique().tolist()[:-2]
    ikb_catalogue = category_buttons(list_but,(2,2,1,1,1,1,1,1,2,1,1,2,1,))
    await bot.send_photo(chat_id= msg.chat.id,
                        photo=photo,
                        caption='–ü—Ä–∏–≤–µ—Ç! üôÇ\n–° –í–∞–º–∏ –ù–∞—Ç–∞–ª—å—è –∏ –º–æ–π –Ω–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç - –±–æ—Ç ü§ñ Market Buyer üë©üèº‚Äçüåæ\n–¢–µ–ø–µ—Ä—å —ç—Ç–æ –í–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Å–≤–µ–∂–∏—Ö –∏ –≤–∫—É—Å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ üçí\n\n–°–º–µ–ª–æ –Ω–∞–ø–æ–ª–Ω—è–π—Ç–µ –∫–æ—Ä–∑–∏–Ω—É üß∫ –∏ –æ—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–∫–∞–∑—ã —Å–µ–±–µ –∏ –±–ª–∏–∑–∫–∏–º, –≤–µ–¥—å –¥–æ—Å—Ç–∞–≤–∫–∞ —Å–≤–µ–∂–∏—Ö –∏ –≤–∫—É—Å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –≤—Å–µ–π –ú–æ—Å–∫–≤–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ ))',
                        reply_markup=ikb_catalogue)
    # await msg.answer('–ö–∞—Ç–∞–ª–æ–≥', reply_markup=ikb_catalogue)
    await msg.delete()

# @dp.message_handler(commands=['help'])
async def process_help_command(msg: types.Message):
    if str(msg.from_user.id) in ADMIN:
        kb_admin = get_reply_keyboard(['–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä', '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä'],(2,1))
        await msg.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω-–ü–∞–Ω–µ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ', reply_markup=kb_admin)
    else:
        kb = get_reply_keyboard(['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',],(1,))
        await msg.answer(HELP_COMMAND, parse_mode='HTML',reply_markup=kb)
        await msg.delete()

# @dp.message_handler(commands=['cart'])
async def check_cart(msg):
    if type(msg) == types.CallbackQuery:
        await msg.answer()
        msg=msg.message        
    photo = "http://allboxes.ru/wp-content/uploads/2015/12/korzina.jpg"
    cart_data = pd.DataFrame(check_cartTable(msg.chat.id), columns=['userid', 'itemid', 'weight','itemsum'])
    if not cart_data.empty:
        df2 = cart_data[['itemid','weight','itemsum']].groupby('itemid').sum().reset_index()
        text_msg='–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã: \n'
        res_sum = 0
        for i in range(len(df2)):
            good = goods.loc[goods['–ê—Ä—Ç–∏–∫—É–ª']==df2['itemid'][i]]
            title = good.reset_index(drop=True)['–ù–∞–∏–º–µ–Ω–æ–≤–Ω–∏–µ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É'][0]
            volume = good.reset_index(drop=True)['–û–±—ä–µ–º'][0]
            text_msg +='üîπ' + title + str('  ‚öñÔ∏è–í–µ—Å: ') + str(df2['weight'][i]) +' '+str(volume) + str('  ü´∞–°—É–º–º–∞: ') + str(df2['itemsum'][i]) + ';\n'
            res_sum += df2['itemsum'][i]
        text_msg += '____________________________________\n –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: {}'.format(str(res_sum)+' ‚ÇΩ')
        ikb_cart = three_inline_buttons(['–û—Ñ–æ—Ä–º–∏—Ç—å','–ö –∫–∞—Ç–∞–ª–æ–≥—É','–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'],(1,2,))
        await msg.answer_photo(
                            photo=photo,
                            caption=text_msg,
                            reply_markup=ikb_cart)
        # await msg.answer(text=text_msg)
    else:
        ikb_cart = three_inline_buttons(['–ö –∫–∞—Ç–∞–ª–æ–≥—É',],(1,))
        await msg.answer_photo(
                            photo=photo,
                            caption='–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, —Å–∫–æ—Ä–µ–µ –∫ –ø–æ–∫—É–ø–∫–∞–º',
                            reply_markup=ikb_cart)
        await msg.answer(text='–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')


# @dp.message_handler(commands=['order'])
async def check_userorder(msg):
    if type(msg) == types.CallbackQuery:
        await msg.answer()
        msg=msg.message        
    data_orders = pd.DataFrame(check_orders(msg.chat.id), columns= ['order_id','user_name', 'user_id', 'listids', 'date', 'adress', 'phone', 'shipment'])
    # print(data_orders)
    if not data_orders.empty:
        df2 = data_orders.sort_values(by='date',ascending=False).reset_index()[:3]
        text_msg='–í–∞—à–∏ –∑–∞–∫–∞–∑—ã: \n'
        for i in range(len(df2)):
            df_temp = pd.DataFrame(eval(df2['listids'][i]))
            goodsdf = goods.loc[goods['–ê—Ä—Ç–∏–∫—É–ª'].isin(df_temp['itemid'].tolist())]
            title = goodsdf.reset_index(drop=True)['–ù–∞–∏–º–µ–Ω–æ–≤–Ω–∏–µ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É'].tolist()
            title_str =''
            for t in title:
                title_str+=str(t)+ str(', ')
            text_msg +='üîπ –ó–∞–∫–∞–∑: ' + title_str + str('  –î–∞—Ç–∞: ') + str(df2['date'][i]) +'\n'
        ikb_cart = three_inline_buttons(['–ö –∫–∞—Ç–∞–ª–æ–≥—É','–ö –∫–æ—Ä–∑–∏–Ω–µ'],(1,))
        await msg.answer(text=text_msg, reply_markup=ikb_cart)
    else:
        ikb_cart = three_inline_buttons(['–ö –∫–∞—Ç–∞–ª–æ–≥—É','–ö –∫–æ—Ä–∑–∏–Ω–µ'],(1,))
        await msg.answer(text='–í—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–∞–∑–∞–ª–∏', reply_markup=ikb_cart)


# @dp.message_handler(commands=['description'])
async def process_descr_command(msg):
    if type(msg) == types.CallbackQuery:
        await msg.answer()
        msg=msg.message
    async with ChatActionSender.upload_video(chat_id=msg.chat.id):
        await msg.answer(text='–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æüé¶')
        video = types.FSInputFile(r".\media\IMG_0399.mp4")
        print(video)
        await bot.send_video(caption='–î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n\n–£ –Ω–∞—Å –Ω–∞ –∫–∞–Ω–∞–ª–µ –º–Ω–æ–≥–æ –Ω–æ–≤–µ–Ω—å–∫–∏—Ö:) –ú—ã –æ—á–µ–Ω—å —ç—Ç–æ–º—É —Ä–∞–¥—ã –∏ —Ö–æ—Ç–∏–º –∫–æ–º—É-—Ç–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, –∞ –∫–æ–º—É-—Ç–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Ç–æ–º, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è Market Buyer –∏ –≤ —á–µ–º –Ω–∞—à–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—åüíö',
                       chat_id=msg.chat.id, video=video, width=720, height=1280)
        await msg.delete()

async def check_favs(msg):
    if type(msg) == types.CallbackQuery:
        await msg.answer()
        msg=msg.message        
    favs_data = pd.DataFrame(check_favTable(msg.chat.id), columns=['userid', 'itemid'])
    if not favs_data.empty:
        df_goods =goods.loc[goods['–ê—Ä—Ç–∏–∫—É–ª'].isin(favs_data['itemid'].tolist())].reset_index(drop=True)
        ikb_favs = favs_buttons(df_goods,(1,))
        await msg.answer(text='–ò–∑–±—Ä–∞–Ω–Ω—ã–µüëá',
                            reply_markup=ikb_favs)
    else:
        ikb_cart = three_inline_buttons(['–ö –∫–∞—Ç–∞–ª–æ–≥—É',],(1,))
        await msg.answer(text='–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø—É—Å—Ç–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"',
                            reply_markup=ikb_cart)



